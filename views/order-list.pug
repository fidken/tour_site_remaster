doctype html
html
  head
    title Orders Table
    style.
      /* Подсветка статуса заказа */
      .status-active {
          background-color: #d4edda; /* Зелёный */
          color: #155724;
      }

      .status-inactive {
          background-color: #f8d7da; /* Красный */
          color: #721c24;
      }

      .status-pending {
          background-color: #fff3cd; /* Жёлтый */
          color: #856404;
      }

      /* Подсветка статуса обработки заказа */
      .processing-in-progress {
          background-color: #cce5ff; /* Синий */
          color: #004085;
      }

      .processing-completed {
          background-color: #d4edda; /* Зелёный */
          color: #155724;
      }

      .processing-cancelled {
          background-color: #f8d7da; /* Красный */
          color: #721c24;
      }

      /* Подсветка суммы оплаченного */
      .amount-paid-low {
          background-color: #f8d7da; /* Красный */
          color: #721c24;
      }

      .amount-paid-partial {
          background-color: #fff3cd; /* Жёлтый */
          color: #856404;
      }

      .amount-paid-full {
          background-color: #d4edda; /* Зелёный */
          color: #155724;
      }

      .popup-notification {
          position: fixed;
          bottom: 20px;
          right: 20px;
          background-color: #333;
          color: white;
          padding: 10px 20px;
          border-radius: 5px;
          opacity: 0;
          transform: translateY(20px);
          transition: opacity 0.3s, transform 0.3s;
          z-index: 1001;
      }

      .popup-notification.success {
          background-color: #28a745;
      }

      .popup-notification.error {
          background-color: #dc3545;
      }
  body
    table.data-table
      thead
        tr
          th ID
          th ID тура
          th Информация о пользователе
          th Выбранные даты
          th Комментарий пользователя
          th Количество человек
          th Стоимость
          th Сумма к оплате
          th Комм. адм. (публ.)
          th Комм. адм. (приват.)
          th Статус заказа
          th Статус оплаты

      tbody
        each order in orders
          tr(data-order-id=order.id)
            td= order.id
            td: a(href=`/tours/${order.tour_id}`)= order.tour_id
            td
              if order.userDetails
                p #{order.userDetails.firstName} #{order.userDetails.lastName}
                p Phone: #{order.userDetails.phone}
                p Email: #{order.userDetails.email}
              else
                p User not found
            td 
              each date in order.selected_dates
                p= formatDate(date)
            td
              input(type="text", name=`user_comment_${order.id}`, value=order.user_comment || "No comment", class="user-comment")
            td= order.people_count
            td= order.total_service_cost
            td
              input(type="number", name=`amount_paid_${order.id}`, value=order.amount_paid, class="amount-paid")
            td
              input(type="text", name=`admin_comment_public_${order.id}`, value=order.admin_comment_public || "No comment", class="admin-comment-public")
            td
              input(type="text", name=`admin_comment_private_${order.id}`, value=order.admin_comment_private || "No comment", class="admin-comment-private")
            td
              select(name=`status_${order.id}`, class="status")
                option(value="active", selected=order.status === "active") Новый
                option(value="inactive", selected=order.status === "inactive") В работе
                option(value="pending", selected=order.status === "pending") Подтверждено
                option(value="not_confirmed", selected=order.status === "not_confirmed") Не подтверждено
                option(value="completed", selected=order.status === "completed") Завершено

                
            td
              select(name=`processing_status_${order.id}`, class="processing-status")
                option(value="in-progress", selected=order.processing_status === "in-progress") Ожидаем оплаты
                option(value="completed", selected=order.processing_status === "completed") Оплата получена
                option(value="cancelled", selected=order.processing_status === "cancelled") Отмена

script.
  document.addEventListener('DOMContentLoaded', () => {
    const rows = document.querySelectorAll('.data-table tbody tr');
    let timeoutId;

    const saveOrder = async (orderData) => {
      try {
        const response = await fetch('/save-order', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(orderData),
        });

        if (!response.ok) {
          throw new Error('Failed to save order');
        }

        showPopupNotification('Order saved successfully', 'success');
      } catch (error) {
        showPopupNotification(`Error: ${error.message}`, 'error');
      }
    };

    const showPopupNotification = (message, type) => {
      const notification = document.createElement('div');
      notification.className = `popup-notification ${type}`;
      notification.innerHTML = `${message} <span class="close-btn">&times;</span>`;
      document.body.appendChild(notification);

      notification.querySelector('.close-btn').addEventListener('click', () => {
        notification.remove();
      });

      setTimeout(() => {
        notification.style.opacity = '1';
        notification.style.transform = 'translateY(0)';
      }, 10);

      setTimeout(() => {
        if (notification) notification.remove();
      }, 3000);
    };

    const updateRowClasses = (row) => {
      const statusSelect = row.querySelector('select[name^="status_"]');
      const processingStatusSelect = row.querySelector('select[name^="processing_status_"]');
      const amountPaidInput = row.querySelector('input[name^="amount_paid_"]');
      const totalServiceCost = parseFloat(row.querySelector('td:nth-child(6)').textContent);

      // Update status classes
      statusSelect.classList.remove('status-active', 'status-inactive', 'status-pending');
      statusSelect.classList.add(`status-${statusSelect.value}`);

      // Update processing status classes
      processingStatusSelect.classList.remove('processing-in-progress', 'processing-completed', 'processing-cancelled');
      processingStatusSelect.classList.add(`processing-${processingStatusSelect.value}`);

      // Update amount paid classes
      const amountPaid = parseFloat(amountPaidInput.value);
      if (!isNaN(amountPaid) && !isNaN(totalServiceCost)) {
        amountPaidInput.classList.remove('amount-paid-low', 'amount-paid-partial', 'amount-paid-full');

        if (amountPaid < totalServiceCost * 0.5) {
          amountPaidInput.classList.add('amount-paid-low');
        } else if (amountPaid < totalServiceCost) {
          amountPaidInput.classList.add('amount-paid-partial');
        } else {
          amountPaidInput.classList.add('amount-paid-full');
        }
      }
    };

    const handleChange = (row) => {
      clearTimeout(timeoutId);

      timeoutId = setTimeout(() => {
        const orderId = row.dataset.orderId;
        const statusSelect = row.querySelector('select[name^="status_"]');
        const processingStatusSelect = row.querySelector('select[name^="processing_status_"]');
        const amountPaidInput = row.querySelector('input[name^="amount_paid_"]');
        const userCommentInput = row.querySelector('input[name^="user_comment_"]');
        const adminCommentPublicInput = row.querySelector('input[name^="admin_comment_public_"]');
        const adminCommentPrivateInput = row.querySelector('input[name^="admin_comment_private_"]');

        const orderData = {
          id: orderId,
          status: statusSelect.value,
          processing_status: processingStatusSelect.value,
          amount_paid: amountPaidInput.value,
          user_comment: userCommentInput.value,
          admin_comment_public: adminCommentPublicInput.value,
          admin_comment_private: adminCommentPrivateInput.value,
        };

        // Validation
        if (parseFloat(orderData.amount_paid) < 0 || parseFloat(orderData.amount_paid) > 1e12) {
          showPopupNotification('Invalid amount paid', 'error');
          return;
        }

        saveOrder(orderData);
        row.classList.add('highlight');
        setTimeout(() => row.classList.remove('highlight'), 2000);

        updateRowClasses(row);
      }, 2000);
    };

    rows.forEach((row) => {
      const inputs = row.querySelectorAll('input, select');

      inputs.forEach((input) => {
        input.addEventListener('input', () => handleChange(row));
        input.addEventListener('change', () => handleChange(row));
      });

      updateRowClasses(row); // Update classes on load
    });
  });
